// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "InterfaceWindow.h"

inline void UserInterface::cb_NewRefFrameButton_i(Fl_Button*, void*) {
  extern bool refreshRefScene;
refreshRefScene = true;
StatusOutput->value("Taking new reference.");

// Write the reference image out to disk
{

  int W = AssociatedVidWin->w();
  int H = AssociatedVidWin->h();
  unsigned char *pixbufptr = pixbuf ; //tmp pointer into the pixel buffer to
					//help scan lines into it upside/down
					//because glreadpixels inverts

  
  for ( int i=0 ; i<H ; i++ ) {
    pixbufptr = pixbuf + i*W*3 ;
    glReadPixels( 0, H-i, W, 1, GL_RGB, GL_UNSIGNED_BYTE, pixbufptr );
  }
};
}
void UserInterface::cb_NewRefFrameButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_NewRefFrameButton_i(o,v);
}

inline void UserInterface::cb_SaveRefButton_i(Fl_Button*, void*) {
  extern Scene *refScene;
if( refScene == NULL ) return;

// save scene vector information
{
	char SceneFilename[100];
	
	refScene->saveToDisk( SaveRefFilenameInput->value() );
	sprintf(SceneFilename, "Saved Ref. File named %s",SaveRefFilenameInput->value() );
	StatusOutput->value(SceneFilename);
	
	char RefImageFilename[100];
	sprintf(RefImageFilename, "%s.ppm", SaveRefFilenameInput->value() );

	int W = AssociatedVidWin->w();
	int H = AssociatedVidWin->h();
	FILE *FP = fopen(RefImageFilename, "w"); 
	fprintf(FP, "P6\n%d %d\n255\n", W, H);
  	fwrite( pixbuf, W, H*3, FP );
	fclose(FP);
};
}
void UserInterface::cb_SaveRefButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_SaveRefButton_i(o,v);
}

inline void UserInterface::cb_LoadRefFileButton_i(Fl_Button*, void*) {
  extern Scene  *refScene;
	
refScene = new Scene(LoadRefFilenameInput->value());

if( refScene->features.size() == 0 ) {
	StatusOutput->value("**Error** Could not load file.");
}
else {
	char fname[1024];
	sprintf(fname, "Loaded %d features from %s", refScene->features.size(), LoadRefFilenameInput->value());
	StatusOutput->value(fname);
	
	char Entry[1024];
	sprintf(Entry, "%s\t%d\t%s.ppm\t%s-overlay.png", LoadRefFilenameInput->value(), refScene->features.size(), LoadRefFilenameInput->value(), LoadRefFilenameInput->value()   );
	//LoadedScenesBrowser->add(LoadRefFilenameInput->value(), (void *)refScene );
	LoadedScenesBrowser->add( Entry, (void *)refScene );
};
}
void UserInterface::cb_LoadRefFileButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_LoadRefFileButton_i(o,v);
}

inline void UserInterface::cb_RemoveSceneButton_i(Fl_Button*, void*) {
  LoadedScenesBrowser->remove( LoadedScenesBrowser->value() );
}
void UserInterface::cb_RemoveSceneButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_RemoveSceneButton_i(o,v);
}

UserInterface::UserInterface(Fl_Window *vidwin) {
  Fl_Window* w;
  { Fl_Window* o = InterfaceWindow = new Fl_Window(415, 440, "Scene Manager");
    w = o;
    o->user_data((void*)(this));
    { Fl_Output* o = FeaturesMatchedOutput = new Fl_Output(380, 0, 35, 25, "Features Matched");
      o->tooltip("The number of features in the current image that match to the features in the\
 reference image.");
    }
    { Fl_Output* o = FeaturesFoundOutput = new Fl_Output(115, 0, 35, 25, "Features Found");
      o->tooltip("The number of features detected in the current image.");
    }
    { Fl_Button* o = NewRefFrameButton = new Fl_Button(125, 75, 165, 25, "Take New Reference");
      o->tooltip("Updates the current reference frame to be the latest image.");
      o->callback((Fl_Callback*)cb_NewRefFrameButton);
    }
    { Fl_Button* o = SaveRefButton = new Fl_Button(290, 110, 125, 25, "Save");
      o->tooltip("Saves the current reference frame to the file.");
      o->callback((Fl_Callback*)cb_SaveRefButton);
    }
    { Fl_Input* o = SaveRefFilenameInput = new Fl_Input(135, 110, 150, 25, "Save Ref. to File");
      o->tooltip("The name of the file to save the reference frame to.");
    }
    { Fl_Output* o = StatusOutput = new Fl_Output(0, 415, 430, 35);
      o->box(FL_BORDER_BOX);
    }
    { Fl_Output* o = FPSOutput = new Fl_Output(375, 385, 35, 25, "FPS");
      o->tooltip("Frames per second");
    }
    { Fl_Input* o = LoadRefFilenameInput = new Fl_Input(135, 140, 150, 25, "Load Ref. from File");
      o->tooltip("Enter here the filename of the scene to be loaded.");
    }
    { Fl_Button* o = LoadRefFileButton = new Fl_Button(290, 140, 125, 25, "<< Load");
      o->tooltip("Click to load in the file specified above.");
      o->callback((Fl_Callback*)cb_LoadRefFileButton);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Browser* o = LoadedScenesBrowser = new Fl_Browser(0, 170, 415, 145, "Loaded Scenes");
      o->tooltip("This lists all the scenes loaded and being looked for.");
      o->type(1);
    }
    { Fl_Button* o = RemoveSceneButton = new Fl_Button(265, 330, 150, 25, ">> Remove");
      o->tooltip("Remove the selected scene from the loaded scenes list.");
      o->callback((Fl_Callback*)cb_RemoveSceneButton);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = MatchedToOutput = new Fl_Output(120, 385, 220, 25, "Matched Scene:");
      o->tooltip("The name of the scene currently recognized.");
      o->box(FL_BORDER_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->textfont(9);
      o->textcolor(101);
    }
    { Fl_Light_Button* o = ShowFeatures = new Fl_Light_Button(15, 35, 130, 25, "Show Features");
      o->tooltip("Show/Hide features found");
    }
    o->end();
  }
  AssociatedVidWin = vidwin;
  pixbuf = (unsigned char *)malloc( AssociatedVidWin->w() * AssociatedVidWin->h() * 4 );
}

void UserInterface::show(int argc, char *argv[]) {
  InterfaceWindow->show();
}
