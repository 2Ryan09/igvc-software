# data file for the Fltk User Interface Designer (fluid)
version 1.0106 
header_name {.h} 
code_name {.cxx}
class UserInterface {open
} {
  Function {UserInterface(Fl_Window *vidwin)} {open
  } {
    Fl_Window InterfaceWindow {
      label {Scene Manager} open selected
      xywh {189 255 415 440} type Single
      code0 {\#include <openvidia/libopenvidia.h>} visible
    } {
      Fl_Output FeaturesMatchedOutput {
        label {Features Matched}
        tooltip {The number of features in the current image that match to the features in the reference image.} xywh {380 0 35 25}
      }
      Fl_Output FeaturesFoundOutput {
        label {Features Found}
        tooltip {The number of features detected in the current image.} xywh {115 0 35 25}
      }
      Fl_Button NewRefFrameButton {
        label {Take New Reference}
        callback {extern bool refreshRefScene;
refreshRefScene = true;
StatusOutput->value("Taking new reference.");

// Write the reference image out to disk
{

  int W = AssociatedVidWin->w();
  int H = AssociatedVidWin->h();
  unsigned char *pixbufptr = pixbuf ; //tmp pointer into the pixel buffer to
					//help scan lines into it upside/down
					//because glreadpixels inverts

  
  for ( int i=0 ; i<H ; i++ ) {
    pixbufptr = pixbuf + i*W*3 ;
    glReadPixels( 0, H-i, W, 1, GL_RGB, GL_UNSIGNED_BYTE, pixbufptr );
  }
}}
        tooltip {Updates the current reference frame to be the latest image.} xywh {125 75 165 25}
      }
      Fl_Button SaveRefButton {
        label Save
        callback {extern Scene *refScene;
if( refScene == NULL ) return;

// save scene vector information
{
	char SceneFilename[100];
	
	refScene->saveToDisk( SaveRefFilenameInput->value() );
	sprintf(SceneFilename, "Saved Ref. File named %s",SaveRefFilenameInput->value() );
	StatusOutput->value(SceneFilename);
	
	char RefImageFilename[100];
	sprintf(RefImageFilename, "%s.ppm", SaveRefFilenameInput->value() );

	int W = AssociatedVidWin->w();
	int H = AssociatedVidWin->h();
	FILE *FP = fopen(RefImageFilename, "w"); 
	fprintf(FP, "P6\\n%d %d\\n255\\n", W, H);
  	fwrite( pixbuf, W, H*3, FP );
	fclose(FP);
}}
        tooltip {Saves the current reference frame to the file.} xywh {290 110 125 25}
      }
      Fl_Input SaveRefFilenameInput {
        label {Save Ref. to File}
        tooltip {The name of the file to save the reference frame to.} xywh {135 110 150 25}
      }
      Fl_Output StatusOutput {
        xywh {0 415 430 35} box BORDER_BOX
      }
      Fl_Output FPSOutput {
        label FPS
        tooltip {Frames per second} xywh {375 385 35 25}
      }
      Fl_Input LoadRefFilenameInput {
        label {Load Ref. from File}
        tooltip {Enter here the filename of the scene to be loaded.} xywh {135 140 150 25}
      }
      Fl_Button LoadRefFileButton {
        label {<< Load}
        callback {extern Scene  *refScene;
	
refScene = new Scene(LoadRefFilenameInput->value());

if( refScene->features.size() == 0 ) {
	StatusOutput->value("**Error** Could not load file.");
}
else {
	char fname[1024];
	sprintf(fname, "Loaded %d features from %s", refScene->features.size(), LoadRefFilenameInput->value());
	StatusOutput->value(fname);
	
	char Entry[1024];
	sprintf(Entry, "%s\\t%d\\t%s.ppm\\t%s-overlay.png", LoadRefFilenameInput->value(), refScene->features.size(), LoadRefFilenameInput->value(), LoadRefFilenameInput->value()   );
	//LoadedScenesBrowser->add(LoadRefFilenameInput->value(), (void *)refScene );
	LoadedScenesBrowser->add( Entry, (void *)refScene );
}}
        tooltip {Click to load in the file specified above.} xywh {290 140 125 25} align 20
      }
      Fl_Browser LoadedScenesBrowser {
        label {Loaded Scenes}
        tooltip {This lists all the scenes loaded and being looked for.} xywh {0 170 415 145} type Select
      }
      Fl_Button RemoveSceneButton {
        label {>> Remove}
        callback {LoadedScenesBrowser->remove( LoadedScenesBrowser->value() );}
        tooltip {Remove the selected scene from the loaded scenes list.} xywh {265 330 150 25} align 20
      }
      Fl_Output MatchedToOutput {
        label {Matched Scene:}
        tooltip {The name of the scene currently recognized.} xywh {120 385 220 25} box BORDER_BOX color 49 textfont 9 textcolor 101
      }
      Fl_Light_Button ShowFeatures {
        label {Show Features}
        tooltip {Show/Hide features found} xywh {15 35 130 25}
      }
    }
    code {AssociatedVidWin = vidwin;} {}
    code {pixbuf = (unsigned char *)malloc( AssociatedVidWin->w() * AssociatedVidWin->h() * 4 );} {}
  }
  Function {show(int argc, char *argv[])} {open return_type void
  } {
    code {InterfaceWindow->show();} {}
  }
  decl {Fl_Window *AssociatedVidWin;} {}
  decl {unsigned char *pixbuf; // pixel buffer for saving refernce images temporarily} {}
} 
