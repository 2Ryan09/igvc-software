/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.sourceforge.playerstage.Jplayertcp;

public class PlayerTCP {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected PlayerTCP(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PlayerTCP obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      playertcp_javaJNI.delete_PlayerTCP(swigCPtr);
    }
    swigCPtr = 0;
  }

  public PlayerTCP() {
    this(playertcp_javaJNI.new_PlayerTCP(), true);
  }

  public void setThread(SWIGTYPE_p_pthread_t thread) {
    playertcp_javaJNI.set_PlayerTCP_thread(swigCPtr, SWIGTYPE_p_pthread_t.getCPtr(thread));
  }

  public SWIGTYPE_p_pthread_t getThread() {
    return new SWIGTYPE_p_pthread_t(playertcp_javaJNI.get_PlayerTCP_thread(swigCPtr), true);
  }

  public int Listen(int[] ports, int num_ports) {
    return playertcp_javaJNI.PlayerTCP_Listen(swigCPtr, ports, num_ports);
  }

  public SWIGTYPE_p_MessageQueue AddClient(SWIGTYPE_p_sockaddr_in cliaddr, long local_host, long local_port, int newsock, boolean send_banner, int[] kill_flag) {
    long cPtr = playertcp_javaJNI.PlayerTCP_AddClient(swigCPtr, SWIGTYPE_p_sockaddr_in.getCPtr(cliaddr), local_host, local_port, newsock, send_banner, kill_flag);
    return (cPtr == 0) ? null : new SWIGTYPE_p_MessageQueue(cPtr, false);
  }

  public int Accept(int timeout) {
    return playertcp_javaJNI.PlayerTCP_Accept(swigCPtr, timeout);
  }

  public void Close(int cli) {
    playertcp_javaJNI.PlayerTCP_Close(swigCPtr, cli);
  }

  public int ReadClient(int cli) {
    return playertcp_javaJNI.PlayerTCP_ReadClient(swigCPtr, cli);
  }

  public int Read(int timeout) {
    return playertcp_javaJNI.PlayerTCP_Read(swigCPtr, timeout);
  }

  public int Write() {
    return playertcp_javaJNI.PlayerTCP_Write(swigCPtr);
  }

  public int WriteClient(int cli) {
    return playertcp_javaJNI.PlayerTCP_WriteClient(swigCPtr, cli);
  }

  public void DeleteClients() {
    playertcp_javaJNI.PlayerTCP_DeleteClients(swigCPtr);
  }

  public void ParseBuffer(int cli) {
    playertcp_javaJNI.PlayerTCP_ParseBuffer(swigCPtr, cli);
  }

  public int HandlePlayerMessage(int cli, SWIGTYPE_p_Message msg) {
    return playertcp_javaJNI.PlayerTCP_HandlePlayerMessage(swigCPtr, cli, SWIGTYPE_p_Message.getCPtr(msg));
  }

  public void DeleteClient(SWIGTYPE_p_MessageQueue q) {
    playertcp_javaJNI.PlayerTCP_DeleteClient(swigCPtr, SWIGTYPE_p_MessageQueue.getCPtr(q));
  }

  public boolean Listening(int port) {
    return playertcp_javaJNI.PlayerTCP_Listening(swigCPtr, port);
  }

  public SWIGTYPE_p_uint32_t GetHost() {
    return new SWIGTYPE_p_uint32_t(playertcp_javaJNI.PlayerTCP_GetHost(swigCPtr), true);
  }

}
